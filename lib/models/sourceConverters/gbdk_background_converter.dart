import 'package:game_boy_graphics_editor/models/graphics/background.dart';
import 'package:game_boy_graphics_editor/models/sourceConverters/source_converter.dart';

import '../graphics/graphics.dart';

class GBDKBackgroundConverter extends SourceConverter {
  static final GBDKBackgroundConverter _singleton =
      GBDKBackgroundConverter._internal();

  factory GBDKBackgroundConverter() {
    return _singleton;
  }

  GBDKBackgroundConverter._internal();

  @override
  String toHeader(Graphics graphics, String name) {
    Background background = graphics as Background;

    return """ // AUTOGENERATED FILE FROM game_boy_graphics_editor
#ifndef MAP_${name}_H
#define MAP_${name}_H
#define ${name}_TILE_ORIGIN ${background.tileOrigin}
#define ${name}_WIDTH ${graphics.width}
#define ${name}_HEIGHT ${graphics.height}


extern const unsigned char $name[];

#endif
""";
  }

  @override
  String toSource(Graphics graphics, String name) =>
      """const unsigned char $name[] = {${formatOutput(graphics.data.map((e) => decimalToHex(e, prefix: true)).toList())}};""";

  Background fromGraphicElement(GraphicElement graphicElement) =>
      Background(data: graphicElement.values);

  Background fromGraphicElementTransposed(GraphicElement graphicElement) {
    var background = Background(data: graphicElement.values);

    for (int rowIndex = 0; rowIndex < background.height; rowIndex++) {
      for (int colIndex = 0; colIndex < background.width; colIndex++) {
        int value = graphicElement.values[(rowIndex * background.width) + colIndex];
        background.setDataAt(colIndex, rowIndex, value);
      }
    }


    return background;
  }
}
